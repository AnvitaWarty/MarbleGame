import java.util.*;

public class MarbleGame 
{

  //Create empty CircleList 
  static CircleList game = new CircleList(); 

  //Amount of marbles for each color
  static int red_size = 20; 
  static int green_size = 20; 
  static int yellow_size = 20; 
  static int blue_size = 20;
  
  //Generic Marble objects will be used to insert in circular linked list
  static Marble red = new Marble(1); 
  static Marble green = new Marble(2); 
  static Marble yellow = new Marble(3); 
  static Marble blue = new Marble(4);
  
  //insertions will be used to calculate number of marbles inserted 
  //score will contain total after insertions
  static int insertions = 0;
  static int score = 0;
  
 public static void main(String[] args) 
 {
  /*
  Main method: To begin the game by asking for user input
  */
  
  Scanner kb = new Scanner(System.in); 
  System.out.print("\nWould you like to begin the marble game? Click any key other than \'q\'" + 
                     " to begin. "); 
  String answer = kb.nextLine().trim().toLowerCase();
 
  if(!answer.equals("q")) 
  {
   System.out.println("We shall begin!");
   randomizer(); 
  }
  else
   System.exit(0); 
 } 

 public static void randomizer() 
 {
  /*
  Randomizer method: Uses pseudo-random number generator to come up with a marble value 
  (between 1 and 4)
  */
  int colorCode; 
  Random r = new Random(); 

  colorCode = r.nextInt(4) + 1;
  addToList(colorCode);
 }

 public static void addToList(int colorCode)
 {
  /*
  AddToList method: Uses value generated by randomizer method to 
  add appropriate marble to circular linked list/game board. It
  decrements the amount of marbles available and increments the number
  of insertions
  */
  
  checkAmountofMarbles(colorCode); 
  switch(colorCode) 
  {
   case 1:
    game.addElement(new Node(red, null));
	red_size--;
	insertions++;
    break; 

   case 2:  
    game.addElement(new Node(green, null)); 
    green_size--;
	insertions++;
    break; 

   case 3:
    game.addElement(new Node(yellow, null));
    yellow_size--;
	insertions++;
    break; 
 
   case 4: 
    game.addElement(new Node(blue, null)); 
    blue_size--;
    insertions++;
    break; 
  }
  checkGame();
 } 

 public static void checkGame() 
 { 
  /*
  CheckGame method: If the game only has 4 elements, 
  then more marbles will be inserted. Otherwise,
  we will create several counter variables (one for each
  color) and while traversing the circular linked list,
  we will appropriately incremement counter variables based
  on the number of times a color occurs in the game board.
  Finally, if one color occurs 4 times or we have 20 insertions,
  the program will go to the tally method.  
  */  
  
  if(game.getSize() < 4) 
   randomizer(); 
  else
  {
   int reds = 0;
   int greens = 0; 
   int yellows = 0; 
   int blues = 0; 
 
   int size = game.getSize(); 

   while(size > 0) 
   {
	game.advanceCursor();
	Node cursor = game.getCursor(); 
    Object o = cursor.getNext().getObject();
    Marble m = (Marble) o; 
    String color = m.getColor().toLowerCase();
    
    switch(color) 
    {
     case "red":
       reds++;
       break; 

     case "green": 
       greens++;
       break; 

     case "yellow":
       yellows++; 
       break; 

     case "blue":
       blues++; 
       break; 
    } 
    
    size--; 
   }

   if(reds == 4) 
    tally(1);
   else if(greens == 4) 
    tally(2); 
   else if(yellows == 4) 
    tally(3); 
   else if(blues == 4)
    tally(4);
   else if(insertions==20)
	tally(0);
   else
    randomizer();
  }
  
 }
 
 public static void tally(int colorVal) 
 {
  /*
  Tally method: First the overall score will be updated. We will
  print out the total points earned for the round, and then based
  on which colored marbles were destroyed, we will increment the
  appropriate variables.Then if insertions is equal to 20, we will 
  reset the score and insertions variables after printing out the final score. 
  */
  
  score += colorVal*4;
  
  if(colorVal != 0)
   {
    System.out.println("\nPoints earned-- " + colorVal + " + " + colorVal + " + " + colorVal + " + " + colorVal + " = " + (4*colorVal)); 
    destroyElements(colorVal);

    switch(colorVal)
    {
	  case 1: 
	   red_size+=4;
	   break;
	  
      case 2:
	   green_size+=4;
	   break;
	  
      case 3:
	   yellow_size+=4;
	   break; 
	  
      case 4:
       blue_size+=4;
       break;	  
    }
   }
   
  if(insertions == 20)
   {
	System.out.println("\nFinal score earned after 20 marble insertions-- " + score); 
	System.out.println("Follow the instructions to start a new game!");
	score = 0; 
	insertions = 0;
	newGame();  
   }

   continueUser();   
 }
 
 public static void destroyElements(int color)
 {
  /*
  DestroyElements Method: This method will remove 
  the four marbles whose colors matched and whose points
  have been calculated and displayed. By traversing the circular
  list, and using the remove() method, we destroy the elements
  */
  
   int destroyed = 4; 
   
   while(destroyed > 0) 
   {
	game.advanceCursor();
	Node cursor = game.getCursor();
	Node n = cursor.getNext(); 
	Object o = n.getObject(); 
	Marble m = (Marble) o; 
    if(m.getValue() == color)
    {
	 game.remove();
     destroyed--;	 
    }
   }
 }	 
 
 public static void continueUser()
 {
  /*
  ContinueUser Method: This method gives users the option to quit the game in the middle
  or continue playing.
  */
  
  Scanner sc = new Scanner(System.in); 
	
  System.out.print("\nWould you like to continue? Click any key other than \'q\' to continue. "); 
  String answer = sc.nextLine().trim().toLowerCase();
  
  if(!answer.equals("q")) 
  {
   System.out.print("We shall continue!\n"); 
   randomizer(); 
  }
  else
  {
    System.out.print("Thank you for playing! Your ending score was -- " + score + ".\n");    
    System.exit(0); 
  }
 } 
 
 public static void newGame()
 {
  /*
  NewGame method: This method clears out the circular linked list by 
  removing all the elements, thereby, clearing the game board. Then 
  it asks the user whether or not they want to begin a new game. If not,
  the system will exit.   
  */
  while(game.getCursor() != null)
  {
	game.remove();
  }
  
  Scanner sc = new Scanner(System.in); 
	
  System.out.print("\nWould you like to start a new game? Click any key other than \'q\' to begin. "); 
  String answer = sc.nextLine().trim().toLowerCase();
  
  if(!answer.equals("q")) 
  {
   System.out.print("We shall begin a new game!\n"); 
   randomizer(); 
  }
  else
  {
    System.out.print("Thank you for playing!\n");    
    System.exit(0); 
  }
 } 
 
 public static void checkAmountofMarbles(int colorCode)
 {
  /*
  CheckAmountOfMarbles method: This method is introduced
  for the worst case scenario where one set or all colored marbles
  have been used.
  */
  
  if(red_size==0) 
	if(green_size==0)
		if(yellow_size==0)
			if(blue_size==0)
				worstCaseEndGame();
  if(red_size == 0 && colorCode == 1)
	addToList(2); 
  if(green_size== 0 && colorCode == 2) 
	addToList(3); 
  if(yellow_size==0 && colorCode == 3) 
	addToList(4); 
  if(blue_size==0 && colorCode == 4) 
	addToList(1);   
  
 }

 public static void worstCaseEndGame() 
 {
  /*
  WorstCaseEndGame method: This method is the result of the worst case scenario. 
  */
  System.out.println("Sorry you ran out of marbles! Better luck next time!"); 
  System.exit(0);
 }
  
}